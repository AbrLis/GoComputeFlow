// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: pkg/worker/proto/worker.proto

package proto

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// WorkerServiceClient is the client API for WorkerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WorkerServiceClient interface {
	GetTimeouts(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*TimeoutsMessage, error)
	SetTimeouts(ctx context.Context, in *TimeoutsRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	SetTask(ctx context.Context, in *TaskRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	GetResult(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*TaskRespons, error)
}

type workerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewWorkerServiceClient(cc grpc.ClientConnInterface) WorkerServiceClient {
	return &workerServiceClient{cc}
}

func (c *workerServiceClient) GetTimeouts(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*TimeoutsMessage, error) {
	out := new(TimeoutsMessage)
	err := c.cc.Invoke(ctx, "/worker.WorkerService/GetTimeouts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workerServiceClient) SetTimeouts(ctx context.Context, in *TimeoutsRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/worker.WorkerService/SetTimeouts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workerServiceClient) SetTask(ctx context.Context, in *TaskRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/worker.WorkerService/SetTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workerServiceClient) GetResult(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*TaskRespons, error) {
	out := new(TaskRespons)
	err := c.cc.Invoke(ctx, "/worker.WorkerService/GetResult", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WorkerServiceServer is the server API for WorkerService service.
// All implementations must embed UnimplementedWorkerServiceServer
// for forward compatibility
type WorkerServiceServer interface {
	GetTimeouts(context.Context, *empty.Empty) (*TimeoutsMessage, error)
	SetTimeouts(context.Context, *TimeoutsRequest) (*empty.Empty, error)
	SetTask(context.Context, *TaskRequest) (*empty.Empty, error)
	GetResult(context.Context, *empty.Empty) (*TaskRespons, error)
	mustEmbedUnimplementedWorkerServiceServer()
}

// UnimplementedWorkerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedWorkerServiceServer struct {
}

func (UnimplementedWorkerServiceServer) GetTimeouts(context.Context, *empty.Empty) (*TimeoutsMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTimeouts not implemented")
}
func (UnimplementedWorkerServiceServer) SetTimeouts(context.Context, *TimeoutsRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetTimeouts not implemented")
}
func (UnimplementedWorkerServiceServer) SetTask(context.Context, *TaskRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetTask not implemented")
}
func (UnimplementedWorkerServiceServer) GetResult(context.Context, *empty.Empty) (*TaskRespons, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetResult not implemented")
}
func (UnimplementedWorkerServiceServer) mustEmbedUnimplementedWorkerServiceServer() {}

// UnsafeWorkerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WorkerServiceServer will
// result in compilation errors.
type UnsafeWorkerServiceServer interface {
	mustEmbedUnimplementedWorkerServiceServer()
}

func RegisterWorkerServiceServer(s grpc.ServiceRegistrar, srv WorkerServiceServer) {
	s.RegisterService(&WorkerService_ServiceDesc, srv)
}

func _WorkerService_GetTimeouts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkerServiceServer).GetTimeouts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/worker.WorkerService/GetTimeouts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkerServiceServer).GetTimeouts(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkerService_SetTimeouts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TimeoutsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkerServiceServer).SetTimeouts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/worker.WorkerService/SetTimeouts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkerServiceServer).SetTimeouts(ctx, req.(*TimeoutsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkerService_SetTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkerServiceServer).SetTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/worker.WorkerService/SetTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkerServiceServer).SetTask(ctx, req.(*TaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkerService_GetResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkerServiceServer).GetResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/worker.WorkerService/GetResult",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkerServiceServer).GetResult(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// WorkerService_ServiceDesc is the grpc.ServiceDesc for WorkerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WorkerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "worker.WorkerService",
	HandlerType: (*WorkerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTimeouts",
			Handler:    _WorkerService_GetTimeouts_Handler,
		},
		{
			MethodName: "SetTimeouts",
			Handler:    _WorkerService_SetTimeouts_Handler,
		},
		{
			MethodName: "SetTask",
			Handler:    _WorkerService_SetTask_Handler,
		},
		{
			MethodName: "GetResult",
			Handler:    _WorkerService_GetResult_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/worker/proto/worker.proto",
}
